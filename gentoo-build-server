#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import sys
import shutil
import tempfile
import argparse
sys.path.append('/usr/lib/gentoo-build-server')
from gbs_param import GbsParam
from gbs_httpd import GbsHttpDaemon


parseResult = None
if True:
    argParser = argparse.ArgumentParser()
    argParser.add_argument("--port", help="Specify listening port.")
    argParser.add_argument("--auth-type", dest='auth_type',
                           choices=['NONE', 'HTPASSWD'], help="Specify authencation type.")
    argParser.add_argument("--pid-file", dest='pid_file', help="Specify location of a PID file.")
    argParser.add_argument("-d", "--debug-level", dest='debug_level',
                           choices=['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'], default="WARNING",
                           help="Set output debug message level")
    parseResult = argParser.parse_args()

param = GbsParam()
try:
    # parse parameter
    if parseResult.port is not None:
        param.port = parseResult.port
    else:
        param.port = 80
    if parseResult.auth_type is not None:
        param.authType = parseResult.auth_type
    else:
        param.authType = "NONE"
    if parseResult.pid_file is not None:
        param.pidFile = parseResult.pid_file
    param.logLevel = parseResult.debug_level
    param.tmpDir = tempfile.mkdtemp(prefix="gentoo-build-server-")

    # start http server
    param.httpServer = GbsHttpDaemon(param)
    param.httpServer.run()
finally:
    if param.tmpDir is not None and os.path.exists(param.tmpDir):
        shutil.rmtree(param.tmpDir)
    if os.path.exists(param.runDir):
        shutil.rmtree(param.runDir)
